x-logging-env: &logging-env
  LOG_LEVEL: ${LOG_LEVEL:-info}
  LOG_FORMAT: ${LOG_FORMAT:-pretty}  # 'pretty' or 'json'
  LOG_TIMESTAMP: ${LOG_TIMESTAMP:-true}

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: nounberg
      POSTGRES_PASSWORD: nounberg
      POSTGRES_DB: nounberg
    ports:
      - "5432:5432"
    volumes:
      - nounberg-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U nounberg || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: always

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis-data:/data

  indexer:
    build:
      context: ./packages/indexer
      dockerfile: Dockerfile
    # Remove the command - let entrypoint handle it
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      queue:
        condition: service_healthy
    environment:
      <<: *logging-env
      DATABASE_URL: postgres://nounberg:nounberg@postgres:5432/nounberg
      DATABASE_SCHEMA: public
      SERVICE_NAME: indexer
      PONDER_RPC_URL_1: ${PONDER_RPC_URL_1}
      QUEUE_API_URL: http://queue:3001
    ports:
      - "42069:42069"

  api:
    build:
      context: ./packages/api
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      indexer:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      <<: *logging-env
      DATABASE_URL: postgres://nounberg:nounberg@postgres:5432/nounberg
      DATABASE_SCHEMA: public
      SERVICE_NAME: api
      PORT: 3000

  queue:
    build:
      context: ./packages/queue
      dockerfile: Dockerfile
    command: npm run start:api
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      <<: *logging-env
      SERVICE_NAME: queue-api
      REDIS_URL: redis://redis:6379
      PORT: 3001
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3001"
      - "prometheus.io/path=/metrics"

  workers:
    build:
      context: ./packages/queue
      dockerfile: Dockerfile
    command: npm run start
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
#      memcached:
#        condition: service_started
      redis:
        condition: service_healthy
      queue:
        condition: service_healthy
    environment:
      <<: *logging-env
      DATABASE_URL: postgres://nounberg:nounberg@postgres:5432/nounberg
      DATABASE_SCHEMA: public
      SERVICE_NAME: worker
      ETHEREUM_RPC_URL: ${PONDER_RPC_URL_1}
      ALCHEMY_API_KEY: ${ALCHEMY_API_KEY:-}
      CACHE_URL: memcached:11211
      REDIS_URL: redis://redis:6379
    deploy:
      replicas: 1  # Reduce to 1 worker replica to limit DB connections
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "8080:3000"
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_WS_URL: ws://localhost:3000

volumes:
  nounberg-data:
    name: nounberg-data
  redis-data:
    name: redis-data