import { toLowerCase } from '../utils/lowercase.js';
import { hexToBigInt, hexToNumber } from "viem";
export const encodeBlock = ({ block, chainId, }) => ({
    chain_id: chainId,
    number: hexToNumber(block.number),
    timestamp: hexToNumber(block.timestamp),
    hash: block.hash,
    parent_hash: block.parentHash,
    logs_bloom: block.logsBloom,
    miner: toLowerCase(block.miner),
    gas_used: hexToBigInt(block.gasUsed),
    gas_limit: hexToBigInt(block.gasLimit),
    base_fee_per_gas: block.baseFeePerGas
        ? hexToBigInt(block.baseFeePerGas)
        : null,
    nonce: block.nonce ?? null,
    mix_hash: block.mixHash ?? null,
    state_root: block.stateRoot,
    receipts_root: block.receiptsRoot,
    transactions_root: block.transactionsRoot,
    sha3_uncles: block.sha3Uncles ?? null,
    size: block.size ? hexToBigInt(block.size) : 0n,
    difficulty: hexToBigInt(block.difficulty),
    total_difficulty: block.totalDifficulty
        ? hexToBigInt(block.totalDifficulty)
        : null,
    extra_data: block.extraData,
});
export const encodeLog = ({ log, chainId, }) => ({
    chain_id: chainId,
    block_number: hexToNumber(log.blockNumber),
    log_index: hexToNumber(log.logIndex),
    transaction_index: hexToNumber(log.transactionIndex),
    block_hash: log.blockHash,
    transaction_hash: log.transactionHash,
    address: toLowerCase(log.address),
    topic0: log.topics[0] ? log.topics[0] : null,
    topic1: log.topics[1] ? log.topics[1] : null,
    topic2: log.topics[2] ? log.topics[2] : null,
    topic3: log.topics[3] ? log.topics[3] : null,
    data: log.data,
});
export const encodeTransaction = ({ transaction, chainId, }) => ({
    chain_id: chainId,
    block_number: hexToNumber(transaction.blockNumber),
    transaction_index: hexToNumber(transaction.transactionIndex),
    hash: transaction.hash,
    block_hash: transaction.blockHash,
    from: toLowerCase(transaction.from),
    to: transaction.to ? toLowerCase(transaction.to) : null,
    input: transaction.input,
    value: hexToBigInt(transaction.value),
    nonce: hexToNumber(transaction.nonce),
    r: transaction.r ?? null,
    s: transaction.s ?? null,
    v: transaction.v ? hexToBigInt(transaction.v) : null,
    type: transaction.type ?? "0x0",
    gas: hexToBigInt(transaction.gas),
    gas_price: transaction.gasPrice ? hexToBigInt(transaction.gasPrice) : null,
    max_fee_per_gas: transaction.maxFeePerGas
        ? hexToBigInt(transaction.maxFeePerGas)
        : null,
    max_priority_fee_per_gas: transaction.maxPriorityFeePerGas
        ? hexToBigInt(transaction.maxPriorityFeePerGas)
        : null,
    access_list: transaction.accessList
        ? JSON.stringify(transaction.accessList)
        : null,
});
export const encodeTransactionReceipt = ({ transactionReceipt, chainId, }) => ({
    chain_id: chainId,
    block_number: hexToNumber(transactionReceipt.blockNumber),
    transaction_index: hexToNumber(transactionReceipt.transactionIndex),
    transaction_hash: transactionReceipt.transactionHash,
    block_hash: transactionReceipt.blockHash,
    from: toLowerCase(transactionReceipt.from),
    to: transactionReceipt.to ? toLowerCase(transactionReceipt.to) : null,
    contract_address: transactionReceipt.contractAddress
        ? toLowerCase(transactionReceipt.contractAddress)
        : null,
    logs_bloom: transactionReceipt.logsBloom,
    gas_used: hexToBigInt(transactionReceipt.gasUsed),
    cumulative_gas_used: hexToBigInt(transactionReceipt.cumulativeGasUsed),
    effective_gas_price: hexToBigInt(transactionReceipt.effectiveGasPrice),
    status: transactionReceipt.status,
    type: transactionReceipt.type,
});
export const encodeTrace = ({ trace, block, transaction, chainId, }) => ({
    chain_id: chainId,
    block_number: hexToNumber(block.number),
    transaction_index: hexToNumber(transaction.transactionIndex),
    trace_index: trace.trace.index,
    from: toLowerCase(trace.trace.from),
    to: trace.trace.to ? toLowerCase(trace.trace.to) : null,
    input: trace.trace.input,
    output: trace.trace.output ?? null,
    value: trace.trace.value ? hexToBigInt(trace.trace.value) : null,
    type: trace.trace.type,
    gas: hexToBigInt(trace.trace.gas),
    gas_used: hexToBigInt(trace.trace.gasUsed),
    error: trace.trace.error ? trace.trace.error.replace(/\0/g, "") : null,
    revert_reason: trace.trace.revertReason
        ? trace.trace.revertReason.replace(/\0/g, "")
        : null,
    subcalls: trace.trace.subcalls,
});
//# sourceMappingURL=encoding.js.map