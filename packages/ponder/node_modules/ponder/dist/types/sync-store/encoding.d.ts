import type { Factory, FragmentId, SyncBlock, SyncLog, SyncTrace, SyncTransaction, SyncTransactionReceipt } from '../internal/types.js';
import type { ColumnType, Insertable } from "kysely";
import type { Address, Hash, Hex } from "viem";
type PgNumeric = ColumnType<string, string | bigint, string | bigint>;
type PgInt8 = ColumnType<string, string | number, string | number>;
type BlocksTable = {
    chain_id: PgInt8;
    number: PgInt8;
    timestamp: PgInt8;
    hash: Hash;
    parent_hash: Hash;
    logs_bloom: Hex;
    miner: Address;
    gas_used: PgNumeric;
    gas_limit: PgNumeric;
    base_fee_per_gas: PgNumeric | null;
    nonce: Hex | null;
    mix_hash: Hash | null;
    state_root: Hash;
    receipts_root: Hash;
    transactions_root: Hash;
    sha3_uncles: Hash | null;
    size: PgNumeric;
    difficulty: PgNumeric;
    total_difficulty: PgNumeric | null;
    extra_data: Hex;
};
export declare const encodeBlock: ({ block, chainId, }: {
    block: SyncBlock;
    chainId: number;
}) => Insertable<BlocksTable>;
type LogsTable = {
    chain_id: PgInt8;
    block_number: PgInt8;
    log_index: number;
    transaction_index: number;
    block_hash: Hash;
    transaction_hash: Hash;
    address: Address;
    topic0: Hex | null;
    topic1: Hex | null;
    topic2: Hex | null;
    topic3: Hex | null;
    data: Hex;
};
export declare const encodeLog: ({ log, chainId, }: {
    log: SyncLog;
    chainId: number;
}) => Insertable<LogsTable>;
type TransactionsTable = {
    chain_id: PgInt8;
    block_number: PgInt8;
    transaction_index: number;
    hash: Hash;
    block_hash: Hash;
    from: Address;
    to: Address | null;
    input: Hex;
    value: PgNumeric;
    nonce: number;
    r: Hex | null;
    s: Hex | null;
    v: PgNumeric | null;
    type: Hex;
    gas: PgNumeric;
    gas_price: PgNumeric | null;
    max_fee_per_gas: PgNumeric | null;
    max_priority_fee_per_gas: PgNumeric | null;
    access_list: string | null;
};
export declare const encodeTransaction: ({ transaction, chainId, }: {
    transaction: SyncTransaction;
    chainId: number;
}) => Insertable<TransactionsTable>;
type TransactionReceiptsTable = {
    chain_id: PgInt8;
    block_number: PgInt8;
    transaction_index: number;
    transaction_hash: Hash;
    block_hash: Hash;
    from: Address;
    to: Address | null;
    contract_address: Address | null;
    logs_bloom: Hex;
    gas_used: PgNumeric;
    cumulative_gas_used: PgNumeric;
    effective_gas_price: PgNumeric;
    status: Hex;
    type: Hex;
};
export declare const encodeTransactionReceipt: ({ transactionReceipt, chainId, }: {
    transactionReceipt: SyncTransactionReceipt;
    chainId: number;
}) => Insertable<TransactionReceiptsTable>;
type TracesTable = {
    chain_id: PgInt8;
    block_number: PgInt8;
    transaction_index: number;
    trace_index: number;
    from: Address;
    to: Address | null;
    input: Hex;
    output: Hex | null;
    value: PgNumeric | null;
    type: string;
    gas: PgNumeric;
    gas_used: PgNumeric;
    error: string | null;
    revert_reason: string | null;
    subcalls: number;
};
export declare const encodeTrace: ({ trace, block, transaction, chainId, }: {
    trace: SyncTrace;
    block: Pick<SyncBlock, "number">;
    transaction: Pick<SyncTransaction, "transactionIndex">;
    chainId: number;
}) => Insertable<TracesTable>;
type IntervalTable = {
    fragment_id: FragmentId;
    chain_id: PgInt8;
    blocks: string;
};
type RpcRequestResultsTable = {
    request_hash: string;
    chain_id: PgInt8;
    block_number: PgInt8 | undefined;
    result: string;
};
type FactoriesTable = {
    id: ColumnType<number, undefined>;
    factory: Factory;
};
type FactoryAddressesTable = {
    id: ColumnType<number, undefined>;
    factory_id: number;
    chain_id: PgInt8;
    block_number: PgInt8;
    address: Address;
};
export type PonderSyncSchema = {
    blocks: BlocksTable;
    logs: LogsTable;
    transactions: TransactionsTable;
    transaction_receipts: TransactionReceiptsTable;
    traces: TracesTable;
    rpc_request_results: RpcRequestResultsTable;
    intervals: IntervalTable;
    factories: FactoriesTable;
    factory_addresses: FactoryAddressesTable;
};
export {};
//# sourceMappingURL=encoding.d.ts.map